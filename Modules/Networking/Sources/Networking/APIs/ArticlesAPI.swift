//
// ArticlesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ArticlesAPI {

    /**
     Articles List
     
     - parameter q: (query) query 
     - parameter pageSize: (query) maximal articles 
     - parameter language: (query) Language in two letters 
     - parameter page: (query) page 
     - parameter apiKey: (query) API key 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func articlesList(q: String, pageSize: Int, language: String, page: Int, apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ArticlesRoot?, _ error: Error?) -> Void)) {
        articlesListWithRequestBuilder(q: q, pageSize: pageSize, language: language, page: page, apiKey: apiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Articles List
     - GET /everything
     - parameter q: (query) query 
     - parameter pageSize: (query) maximal articles 
     - parameter language: (query) Language in two letters 
     - parameter page: (query) page 
     - parameter apiKey: (query) API key 
     - returns: RequestBuilder<ArticlesRoot> 
     */
    open class func articlesListWithRequestBuilder(q: String, pageSize: Int, language: String, page: Int, apiKey: String) -> RequestBuilder<ArticlesRoot> {
        let localVariablePath = "/everything"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q.encodeToJSON(),
            "pageSize": pageSize.encodeToJSON(),
            "language": language.encodeToJSON(),
            "page": page.encodeToJSON(),
            "apiKey": apiKey.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ArticlesRoot>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
